const sqlite3 = require('sqlite3').verbose();
const fs = require('fs');
const chokidar = require('chokidar');
const request = require('request');
const Router = require('koa-router');
const watcher = new Router();
const rp = require('request-promise');
const axios = require('axios');
const FormData = require('form-data');
const concat = require("concat-stream");

var searchPathAry = new Array();
function getSearchPath(){

	var osType = require('os');
	var fileDir = osType.homedir() + '/.config/hamonikr_finder/finder_config';
  var tmpStr = fs.readFileSync(fileDir, 'utf8');
 // var tmpStr = fs.readFileSync('./searchconfigfile', 'utf8');
  var arrPath = tmpStr.split('\n');

  for(var i=0; i<arrPath.length-1; i++){
    searchPathAry[i] = arrPath[i];
  }
}


const ES_UPLOAD_PATH = 'http://192.168.0.55:8081/_upload'
const DB_FILE = './db/files.db';
//const FILE_FOLDER = '/home/rnd/test-file';
const FILE_FOLDER = searchPathAry;

const initializeDB = () => {

  //const dropQuery = `DROP TABLE IF EXISTS filelist`;
  
	return new Promise((resolve, reject) => {
					const insertQuery = `CREATE TABLE IF NOT EXISTS filelist(
																file_id INTEGER PRIMARY KEY AUTOINCREMENT,
																local_path VARCHAR(100),
																url VARCHAR(20))`;
						
					const db = new sqlite3.Database(DB_FILE, sqlite3.OPEN_CREATE | sqlite3.OPEN_READWRITE, (err) => {
						if (err) {
							return console.error(err.message);
						}
						
						db.serialize(() => {
							// db.each(dropQuery);
							db.run(insertQuery);
						})
						
						db.close((err) => {
							if (err) {
								return reject(console.error(err.message));
							}

							console.log('init db close');
							return resolve('done');
						});
					});
	});
}

const main = async () => {
	const res = fs.existsSync(DB_FILE);
	if (res == false) {
		console.log("initializeDB");
  	await initializeDB();
	}
	console.log("initializeDB next");


  const db = new sqlite3.Database(DB_FILE, sqlite3.OPEN_READWRITE);

  process.on('exit', function () {
    db.close((err) => {
      if (err) {
        return console.error(err.message);
      }
      console.log('Close the database connection.');
    });
    console.log('Goodbye!');
  });
  
  console.log('chokidar.watch 시작');

  chokidar.watch(FILE_FOLDER).on('all', async (event, path) => {


//	console.log("path====> "+ path.split("."));


    const asyncQuery = (query) => {
      return new Promise((resolve, reject) => {
        // console.log(`${query}`);
        db.all(query, [], (err, rows) => {
          if (err) {
            return reject(err);
          }
  
          // console.log(`rows.length = ${rows.length}`);

          (rows.length > 0) ? resolve(true) : resolve(false);
        });
      });
    };
    
    // console.log(event, path);
    if (event == 'addDir') {
      console.log(`Ignore addDir ${path}`);
    }

    if (event == 'unlinkDir') {
      console.log(`Ignore unlinkDir ${path}`);
    }

    if (event == 'add') {


console.log('add -----');
			const createTagFile = async (path) => {
    	  return new Promise((resolve, reject) => {
          console.log("createTagFile---------------------------start");
    	    var arg = "{\"external\":{\"description\":\""+path +" \"}}";
          fs.writeFileSync(process.cwd() + "/tagtest.txt", arg, 'utf8');
            var a = go(path);
            console.log("a==="+a);
            console.log("createTagFile---------------------------"+ path);
            return resolve("createTagFile---------------------------done");
        });
      };

      function getCoffee() {
        return new Promise(resolve => {
          setTimeout(() => resolve('☕'), 2000); // it takes 2 seconds to make coffee
        });
      }
      async function go(path) {
        const coffee = await getCoffee();
        return "aa";
        console.log(coffee); // ☕
      }

      const fsrestUpload = async (path) => {
				return new Promise((resolve, reject) => {
					console.log("fsrestUpload---------------------------start");


					let form = new FormData();

					form.append('index', 'myindex');
					form.append('file', fs.createReadStream(path));
					form.append('tags', fs.createReadStream("tagtest.txt"));


      		axios.create({
						headers: form.getHeaders(),
						maxContentLength: 52428890
					}).post(ES_UPLOAD_PATH, form).then(response => {
						console.log("fsrestUpload---------------------------"+response.data);
						return resolve("fsrestUpload---------------------------rest upload done");

					}).catch(error => {
						if (error.response) {
							console.log(error.response);
						}
						console.log(error.message);
					});

					
					//return resolve("done tagfile");
					console.log("fsrestUpload---------------------------done");
				});
      };
      
     
     

      console.log('awiat createTagFile -----');
      //await createTagFile(path).then(console.log("1111111111111111111111111111"));
      // await createTagFile(path).then( await tmpUpload(path));
      await createTagFile(path).then( (res) => {console.log(res)} );
/*      restFsAction = async (path) => {
        const info = await Promise.all([
          await createTagFile(path).then(go(path))
        ]);
      }
      restFsAction(path);
*/

//console.log('awiat fsrestUpload -----');
//				await uploadTagFile(path);
//			await fsrestUpload(path);
//testa(path).then(console.log('done'));
    }

    if (event == 'change') {
      console.log('파일이 변경된 경우');
      const query = `SELECT * FROM filelist WHERE local_path = '${path}'`;
      const found = await asyncQuery(query);

      if (found == false) {
        return console.log(`Local DB 에서 파일을 찾을 수 없음.`);
      }
      
      console.log(`여기서 ES 서버에 파일을 다시 업로드 할 것... ${path}`);
      
      request.post({url: ES_UPLOAD_PATH, formData: {file: fs.createReadStream(path)}}, async (err, response, body) => {
        if (err) {
          return console.error('upload failed:', err);
        }
        
        const result = JSON.parse(body);
				console.log("resu==="+ result);
        if (result.ok == false) {
          return console.log('upload failed');
        }
      });
    }

    if (event == 'unlink') {
      // console.log('파일을 삭제하는 경우')
      const delQuery = `DELETE FROM filelist WHERE local_path = '${path}'`;
      const res = await asyncQuery(delQuery);

      console.log(`여기서 ES 서버 데이터 삭제할 것 ... ${path}`);
    }
  });
};


//getSearchPath();
//main();
//
//module.exports = watcher;


function watcherstart(){
  console.log('action~~~ ');
  getSearchPath();
  main();
}

module.exports = {
	start: watcherstart()
};


